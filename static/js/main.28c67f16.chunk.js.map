{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["EyeWrapper","styled","div","PixelWrapper","Pixel","Eye","props","pixels","onPixelClick","base","side","map","pixel","index","key","style","backgroundColor","onClick","App","state","name","selectedColor","eyes","Array","fill","copied","handleColorChange","color","setState","hex","console","log","onNameChange","e","target","value","output","this","selectedIndex","eyeOutput","result","exec","r","parseInt","g","b","hexTo3BitRgb","JSON","stringify","slice","length","onChange","disableAlpha","type","text","onCopy","language","docco","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i0BAOA,IAAMA,EAAaC,IAAOC,IAAV,KAIVC,EAAeF,IAAOC,IAAV,KAQZE,EAAQH,IAAOC,IAAV,KAWX,SAASG,EAAIC,GAAQ,IACXC,EAA+BD,EAA/BC,OAAQC,EAAuBF,EAAvBE,aACVC,EAAgB,SADiBH,EAATI,KACC,EAAI,EACnC,OACE,kBAACP,EAAD,KACGI,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,kBAACT,EAAD,CACEU,IAAG,eAAUD,GACbE,MAAO,CAAEC,gBAAiBJ,GAC1BK,QAAS,kBAAMT,EAAaC,EAAOI,U,IAkBxBK,E,2MACnBC,MAAQ,CACNC,KAAM,GACNC,cAAe,OACfC,KAAMC,MAAM,IAAIC,KAAK,WACrBC,QAAQ,G,EAGVC,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CAAEP,cAAeM,EAAME,O,EAGvCrB,aAAe,SAAAK,GACb,EAAKe,UAAS,SAAAT,GAGZ,OAFAA,EAAMG,KAAKT,GAASM,EAAME,cAC1BS,QAAQC,IAAIZ,GACLA,M,EAIXa,aAAe,SAAAC,GACbH,QAAQC,IAAIE,EAAEC,OAAOC,OACrB,EAAKP,SAAS,CAAER,KAAMa,EAAEC,OAAOC,S,wEAGvB,IAKJC,EALG,SACsDC,KAAKlB,MAA1DE,EADD,EACCA,cAAeiB,EADhB,EACgBA,cAAehB,EAD/B,EAC+BA,KAAMF,EADrC,EACqCA,KAAMK,EAD3C,EAC2CA,OAE5Cc,EAAYjB,EAAKX,KAAI,SAAAC,GAAK,OAvCpC,SAAsBiB,GACpB,IAAIW,EAAS,4CAA4CC,KAAKZ,GAC9D,OAAOW,EACH,CACEE,EAAGC,SAASH,EAAO,GAAI,KAAO,EAC9BI,EAAGD,SAASH,EAAO,GAAI,KAAO,EAC9BK,EAAGF,SAASH,EAAO,GAAI,KAAO,GAEhC,CAAEE,EAAG,EAAGE,EAAG,EAAGC,EAAG,GA+BiBC,CAAalC,MAejD,OAXEwB,EADW,KAAThB,EACO2B,KAAKC,UAAUT,EAAW,KAAM,GAEhCQ,KAAKC,UAAL,eAEJ5B,EAAOmB,GAEV,KACA,GAKF,6BACGD,EACD,kBAACtC,EAAD,KACE,kBAACK,EAAD,CACEE,OAAQe,EAAK2B,MAAM,EAAG3B,EAAK4B,OAAS,GACpC1C,aAAc6B,KAAK7B,aACnBE,KAAK,SAEP,kBAACL,EAAD,CACEE,OAAQe,EAAK2B,MAAM3B,EAAK4B,OAAS,EAAG5B,EAAK4B,QACzC1C,aAAc6B,KAAK7B,aACnBE,KAAK,UAEP,kBAAC,eAAD,CACEiB,MAAON,EACP8B,SAAUd,KAAKX,kBACf0B,cAAc,KAIlB,6BACE,wCACA,2BAAOC,KAAK,OAAOlB,MAAOf,EAAM+B,SAAUd,KAAKL,gBAEhDP,EAAS,0BAAMV,MAAO,CAAEY,MAAO,QAAtB,WAAgD,KAC1D,kBAAC,kBAAD,CACE2B,KAAMlB,EACNmB,OAAQ,kBAAM,EAAK3B,SAAS,CAAEH,QAAQ,MAEtC,kEAEF,kBAAC,IAAD,CAAmB+B,SAAS,aAAazC,MAAO0C,KAC7CrB,Q,GA5EsBsB,aC7CbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.28c67f16.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { SketchPicker } from 'react-color';\nimport styled from 'styled-components';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst EyeWrapper = styled.div`\n  display: flex;\n`;\n\nconst PixelWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 100px 100px 100px;\n  grid-gap: 5px;\n  margin-left: 10px;\n  margin-top: 10px;\n`;\n\nconst Pixel = styled.div`\n  /* margin-top: 5px; */\n  height: 100px;\n  width: 100px;\n  box-sizing: border-box;\n  border: 1px solid black;\n  :hover {\n    border: 1px solid red;\n  }\n`;\n\nfunction Eye(props) {\n  const { pixels, onPixelClick, side } = props;\n  const base = side === 'left' ? 0 : 9;\n  return (\n    <PixelWrapper>\n      {pixels.map((pixel, index) => (\n        <Pixel\n          key={`pixel${index}`}\n          style={{ backgroundColor: pixel }}\n          onClick={() => onPixelClick(base + index)}\n        />\n      ))}\n    </PixelWrapper>\n  );\n}\n\nfunction hexTo3BitRgb(hex) {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16) >> 5,\n        g: parseInt(result[2], 16) >> 5,\n        b: parseInt(result[3], 16) >> 5\n      }\n    : { r: 0, g: 0, b: 0 };\n}\n\nexport default class App extends Component {\n  state = {\n    name: '',\n    selectedColor: '#fff',\n    eyes: Array(18).fill('#000000'),\n    copied: false\n  };\n\n  handleColorChange = color => {\n    this.setState({ selectedColor: color.hex });\n  };\n\n  onPixelClick = index => {\n    this.setState(state => {\n      state.eyes[index] = state.selectedColor;\n      console.log(state);\n      return state;\n    });\n  };\n\n  onNameChange = e => {\n    console.log(e.target.value);\n    this.setState({ name: e.target.value });\n  };\n\n  render() {\n    const { selectedColor, selectedIndex, eyes, name, copied } = this.state;\n\n    const eyeOutput = eyes.map(pixel => hexTo3BitRgb(pixel));\n\n    let output;\n    if (name === '') {\n      output = JSON.stringify(eyeOutput, null, 2);\n    } else {\n      output = JSON.stringify(\n        {\n          [name]: eyeOutput\n        },\n        null,\n        2\n      );\n    }\n\n    return (\n      <div>\n        {selectedIndex}\n        <EyeWrapper>\n          <Eye\n            pixels={eyes.slice(0, eyes.length / 2)}\n            onPixelClick={this.onPixelClick}\n            side=\"left\"\n          />\n          <Eye\n            pixels={eyes.slice(eyes.length / 2, eyes.length)}\n            onPixelClick={this.onPixelClick}\n            side=\"right\"\n          />\n          <SketchPicker\n            color={selectedColor}\n            onChange={this.handleColorChange}\n            disableAlpha={true}\n          />\n        </EyeWrapper>\n\n        <div>\n          <label>Name:</label>\n          <input type=\"text\" value={name} onChange={this.onNameChange} />\n        </div>\n        {copied ? <span style={{ color: 'red' }}>Copied.</span> : null}\n        <CopyToClipboard\n          text={output}\n          onCopy={() => this.setState({ copied: true })}\n        >\n          <button>Copy to clipboard with button</button>\n        </CopyToClipboard>\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\n          {output}\n        </SyntaxHighlighter>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}